generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String           @default("NO_NAME")
  email         String           @unique(map: "user_email_idx")
  emailVerified DateTime?        @db.Timestamp(6)
  image         String?
  password      String?
  role          String           @default("user")
  address       Json?            @db.Json
  paymentMethod String?
  createdAt     DateTime         @default(now()) @db.Timestamp(6)
  currency      String           @default("eur")
  tokens        Int              @default(10)
  wooCommerceID String?
  stripeID      String?
  account       Account[]
  favorites     Favorite[]
  images        GeneratedImage[]
  payments      Payment[]
  session       Session[]
  rewards       Reward[]
}

model Payment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  amount    Float
  currency  String
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discount  Int
  url       String
  platform  IShare
  isPending Boolean @default(true)
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Favorite {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime       @default(now()) @db.Timestamp(6)
  userId    String         @db.Uuid
  imageId   String         @db.Uuid
  image     GeneratedImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId])
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token   String
  expires DateTime
  email   String
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@unique([token, email])
}

model GeneratedImage {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prompt           String
  negative_prompt  String?
  seed             Int
  img_result       String
  createdAt        DateTime    @default(now()) @db.Timestamp(6)
  updatedAt        DateTime    @updatedAt
  userId           String      @db.Uuid
  is_published     Boolean     @default(false)
  model            IModel?
  color_palette    Json?       @db.Json
  prompt_enhanced  String?
  image_input_url  String?
  image_weight     Int?
  style_builder    String?
  image_description String?
  aspect_ratio     IAspect
  style_type       IStyleType?
  favoritedBy      Favorite[]
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum IShare {
  V_1
  V_2
}

enum IColorSelector {
  EMBER
  FRESH
  JUNGLE
  MAGIC
  MELON
  MOSAIC
  PASTEL
  ULTRAMARINE
}

enum IModel {
  V_1
  V_2
  V_2A
}

enum IAspect {
  ASPECT_10_16
  ASPECT_16_10
  ASPECT_9_16
  ASPECT_16_9
  ASPECT_3_2
  ASPECT_2_3
  ASPECT_4_3
  ASPECT_3_4
  ASPECT_1_1
  ASPECT_1_3
  ASPECT_3_1
}

enum IStyleType {
  AUTO
  GENERAL
  REALISTIC
  DESIGN
  RENDER_3D
  ANIME
}
